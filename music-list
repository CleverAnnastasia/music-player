{
  "component": true,
  "usingComponents": {
    "song-list": "../song-list/song-list",
    "loading": "../loading/loading"
  }
}
<view class="music-list">
  <view class="title" v-html="title"></view>
  <view class="bg-image" style="{{bgStyle}};transform:{{scale}};z-index: {{bgZindex}}" id="bgImage" >
    <view class="play-wrapper" style="z-index: {{zIndex}}">
      <view class="play" wx:if="{{songs.length > 0}}" bindtap="randomPlayall">
        <i class="icon-play"></i>
        <view class="text">随机播放全部</view>
      </view>
    </view>
    <view class="filter" ref="filter"></view>
  </view>
  <view class="bg-layer" ref="layer" style="{{translate}}"></view>
  <view class="scroll-wrapper">
    <scroll-view class="list" id="musiclist" bindscroll="scroll"
                 style="top:{{top}}px" scroll-y bindscrolltolower="getMoreSongs">
      <view class="song-list-wrapper">
        <song-list select="selectItem" songs="{{songs}}"></song-list>
      </view>
      <view class="loading-container" wx:if="{{!songs.length}}">
        <loading></loading>
      </view>
    </scroll-view>
  </view>
</view>
.music-list {
    width: 100%;
    height: 100%;
    position: fixed;
}
.music-list .title {
    position: absolute;
    top: 0;
    left: 10%;
    z-index: 40;
    width: 80%;
    text-overflow: ellipsis;
    overflow: hidden;
    white-space: nowrap;
    text-align: center;
    line-height: 40px;
    font-size: 18px;
    color: #fff;
}
.music-list .bg-image {
    position: relative;
    width: 100%;
    height: 0;
    padding-top: 70%;
    -webkit-transform-origin: top;
    transform-origin: top;
    background-size: cover;
}
.music-list .bg-image .play-wrapper {
    position: absolute;
    bottom: 20px;
    z-index: 50;
    width: 100%;
}
.music-list .bg-image .play-wrapper .play {
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
    width: 135px;
    padding: 7px 0;
    margin: 0 auto;
    text-align: center;
    border: 1px solid #ffcd32;
    color: #ffcd32;
    border-radius: 100px;
    font-size: 0;
}
.music-list .bg-image .play-wrapper .play .text {
    display: inline-block;
    vertical-align: middle;
    font-size: 12px;
}
.music-list .bg-image .play-wrapper .play .icon-play {
    display: inline-block;
    vertical-align: middle;
    margin-right: 6px;
    font-size: 16px;
}
.music-list .bg-image .filter {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(7,17,27,0.4);
}
.music-list .bg-layer {
    position: relative;
    height: 100%;
    background: #222;
}
.music-list .list {
    position: fixed;
    top: 0;
    bottom: 0;
    width: 100%;
    height: 100%;
    background: #222;
}
.music-list .list .song-list-wrapper {
    padding: 20px 30px;
    height: 100%;
}
.song-list .item {
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-align: center;
    -ms-flex-align: center;
    align-items: center;
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
    height: 64px;
    font-size: 14px;
}
.song-list .item .content {
    -webkit-box-flex: 1;
    -ms-flex: 1;
    flex: 1;
    line-height: 20px;
    overflow: hidden;
}
.song-list .item .content .name {
    text-overflow: ellipsis;
    overflow: hidden;
    white-space: nowrap;
    color: #fff;
}
.song-list .item .content .desc {
    text-overflow: ellipsis;
    overflow: hidden;
    white-space: nowrap;
    margin-top: 4px;
    color: rgba(255,255,255,0.3);
}
.scroll-wrapper{
    height: 100%;
}
.music-list .list .loading-container {
    position: absolute;
    width: 100%;
    top: 25%;
    -webkit-transform: translateY(-50%);
    transform: translateY(-50%);
}

const app = getApp().globalData
const util = require('../../../utils/util.js')

Component({
  data: {
    zIndex: 50
  },
  properties: {
    title: {
      type: String,
      value: 'Chicken Music',
      observer: function (newVal) {
        this._setTitle(newVal)
      }
    },
    image: {
      type:String,
      value: '',
      observer: function (newVal) {
        this.setData({
          bgStyle: `background-image:url(${newVal})`
        })
      }
    },
    songs: {
      type: Array,
      value: []
    }
  },
  ready: function () {
    this.setSonglistTop()
    this._setTitle(this.properties.title)
    console.log(this.properties.title)
    // 动态设置歌手头像背景图
    this.setData({
      bgStyle: `background-image:url(${this.properties.image})`
    })
  },
  methods: {
    /*针对不同手机设置songlist的top值*/
    setSonglistTop: function () {
      const _this = this
      wx.createSelectorQuery().in(this).select('#bgImage').boundingClientRect((rect) => {
        rect.height
      }).exec((res) => {
        _this.setData({
          top: res[0].height,
          oldTop: res[0].height //记录原始的top值
        })
      })
    },
    _setTitle: function (title) {
      wx.setNavigationBarTitle({
        title: title
      })
    },
    scroll: function (e) {
      let top = this.data.oldTop - e.detail.scrollTop > 0 ? this.data.oldTop - e.detail.scrollTop : 0
      const percent = Math.abs(e.detail.scrollTop / this.data.oldTop)
      if (e.detail.scrollTop > 20) {
        this.setData({
          zIndex: 0,
          bgZindex: 0
        })
      } else if (e.detail.scrollTop < 20 && e.detail.scrollTop > 0) {
        this.setData({
          zIndex: 50,
          bgZindex: 0
        })
      } else if (e.detail.scrollTop < 0) {
        this.setData({
          scale: `scale(${1 + percent})`,
          translate: `transform:translate3d(0px,${Math.abs(e.detail.scrollTop)}px,0px)`,
          bgZindex: 1,
          zIndex: 50
        })
        return
      }
      this.setData({
        top: top
      })
    },
    randomPlayall: function () {
      app.currentIndex = util.randomNum(this.properties.songs.length)-1
      console.log("currentIndex="+ app.currentIndex);
      app.songlist = this.properties.songs
      app.type = 1
      wx.switchTab({
        url: '/pages/player/player'
      })
    },
    /*向父组件推送滚动到底部的事件*/
    getMoreSongs: function () {
      this.triggerEvent('myevent', this.properties.songs.length)
    }
  }
})
